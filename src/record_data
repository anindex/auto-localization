#!/usr/bin/env python
from __future__ import print_function
#standard libraries
import sys
import os
import numpy as np
import time
from datetime import datetime

#ros libraries
import rospy
import rospkg

#ros messages
from geometry_msgs.msg import PoseArray, PoseWithCovarianceStamped
from krp_localization.msg import RSSIData
from utils.load import save


class RecordData():
    def __init__(self):
        rospy.init_node('record_data_node',anonymous=True)  #ROS node init
        rospack = RosPack()

        #ROS PARAMSERVER
        self.ns = rospy.get_namespace()
        self.file_name_prefix = rospy.get_param('~file_name_prefix', "floor2")
        self.file_path = rospack.get_path('krp_localization') + '/data/'

        rospy.loginfo('Save data in folder: ',self.filepath)

        #lists
        self.rssi = list()
        self.amcl_pose = list()
        self.odom = list()

        #subscribers
        rospy.Subscriber('/rssi', RSSIData, self.callback_rssi)
        rospy.Subscriber('/amcl_pose', PoseWithCovarianceStamped, self.callback_amcl_pose)
        rospy.Subscriber('/odom', PoseWithCovarianceStamped, self.callback_odom)

        shutdown = False
        while (not rospy.is_shutdown()) and (not shutdown):
            time.sleep(5) #check every 5s
            topics = rospy.get_published_topics()
            #outputs 1 if rss is being published, 0 otherwise
            active = sum([1 if 'rssi' in t[0] else 0 for t in topics])
            if not active:
                rospy.loginfo("RSSI Streaming is off! Shutting down recorder...")
                while not shutdown:
                    shutdown = self.save_and_shutdown()
                    time.sleep(1)
                rospy.signal_shutdown("Shutdown")

    #callbacks
    def callback_rssi(self,msg):
        self.rssi.append(msg)
    def callback_amcl_pose(self,msg):
        self.amcl_pose.append(msg)
    def callback_odom(self,msg):
        self.odom.append(msg)

    def save_and_shutdown(self):
        try:
            try:
                import cPickle as pickle
            except ImportError:
                import pickle

            filepath = self.file_path + '/' + str(datetime.now()) + '/'
            os.mkdir(filepath)

            save(self.rssi, filepath + self.file_name_prefix + "rssi.p")
            save(self.amcl_pose, filepath + self.file_name_prefix + "amcl_pose.p")
            save(self.odom, filepath + self.file_name_prefix + "odom.p")

            return True
        except:
            return False

if __name__ == '__main__':
    save = RecordData()
