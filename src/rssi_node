#!/usr/bin/env python
#TODO: change Device to accept st as float not str
from __future__ import print_function
import sys
import rospy
from std_msgs.msg import String
from rssi.devices import WifiDevice
import thread
from krp_localization.msg import RSSI, RSSIData, RssData, RssDatum
import time

class RSSINode():
    def __init__(self):
        self.device_name      = rospy.get_param('~device_name', "wlx74da38d00733")
        self.flag_negative_db = rospy.get_param('~flag_negative_db', True)
        self.mode             = rospy.get_param('~mode', "iwlist")
        self.probe_size       = rospy.get_param('~probe_size', 1)
        self.freq             = rospy.get_param('~freq', 0.2)

        self.pub = rospy.Publisher('rssi', RssData if self.flag_negative_db else RSSIData, queue_size=10)

        #RSSI device init
        self.device = WifiDevice(device_name=self.device_name, mode=self.mode)
        r = rospy.Rate(self.freq)

        rospy.loginfo("RSSI Node started, publishing RSSI at rate {} Hz".format(self.freq))

        while not rospy.is_shutdown():
            macs = {}

            for _ in range(self.probe_size):
                data = self.device.probe_signal()
                for key, val in data.items():
                    if key not in macs:
                        macs[key] = []
                    macs[key].append(val)

            if self.flag_negative_db:
                mess = RssData()
                mess.time_start_ns = rospy.get_rostime().nsecs
                mess.duration_ms   = 1. / self.freq * 1000.

                mess.mac_address = list(macs.keys())
                mess.data = []
                for mac in mess.mac_address:
                    s = RssDatum()
                    s.rss = macs[mac]
                    mess.data.append(s)

            else:
                mess = RSSIData()
                mess.start_time_ns = rospy.get_rostime().nsecs

                mess.macs = list(macs.keys())
                mess.rssi = []
                for mac in mess.macs:
                    s = RSSI()
                    s.rssi = macs[mac]
                    mess.rssi.append(s)

            self.pub.publish(mess)

            r.sleep()

if __name__ == '__main__':
    rospy.init_node('rssi_node',anonymous=True)
    try:
        ra = RSSINode()
    except rospy.ROSInterruptException:
        print('Could not initialize rssi node')
