#!/usr/bin/env python
from __future__ import print_function

#standard libraries
import sys, time
import numpy as np
import copy

#ros libraries
import rospy
import tf

#ros messages
from std_msgs.msg import Float64MultiArray, Int32
from geometry_msgs.msg import PoseArray, Pose, PoseStamped
from krp_localization.msg import RSSIData

#ros services
from krp_localization.srv import RSSILocalization, RSSIParticleInit

from localization.sampling import resampling_wheel_pose_array
from utils.structures import pose_from_array_orientation, get_best_pose, pose_from_array


class KRPWifi():
    def __init__(self):
        rospy.init_node('krp_rssi',anonymous=True)  #ROS node init

        #ROS PARAMSERVER
        self.ns = rospy.get_namespace()

        #frames
        self.global_frame_id = rospy.get_param('~global_frame_id','map')

        self.global_localization = rospy.get_param('~global_localization',True)
        self.nsamples = rospy.get_param('~nsamples', 1000)
        self.rssi_len = rospy.get_param('~rssi_len', 3)
        self.rssi_weightstd_krp_thres = rospy.get_param('~rssi_weightstd_krp_thres', 0.05)
        self.rssi_weightmean_krp_thres = rospy.get_param('~rssi_weightmean_krp_thres', 0.05)

        self.freq = rospy.get_param('~freq', 1)

        #private
        self.raw_rssi = list()

        self.seq = 0
        self.flag_rssi_resampling = False

        #subscribers
        rospy.Subscriber('rssi', RSSIData, self.callback_rssi)
        rospy.Subscriber('particlecloud', PoseArray, self.callback_posearray)

        self.loc_server = rospy.Service(self.ns+'rssi_particle_init', RSSIParticleInit, self.callback_rssi_particle_init)

        #publishers
        self.pub_pose_array = rospy.Publisher("rssi_poses", PoseArray, queue_size=1)
        self.pub_prob_mesh  = rospy.Publisher("rssi_prob_mesh", Float64MultiArray, queue_size=1)
        self.pub_pose_best = rospy.Publisher("rssi_pose_best", PoseStamped, queue_size=1)
        #self.pub_pose_weighted = rospy.Publisher("rssi_pose_weighted", PoseStamped, queue_size=1)


        if self.global_localization:
            request = RSSIParticleInit()
            request.nsamples = self.nsamples
            self.callback_wifiinit(request)

        #MAIN LOOP
        r = rospy.Rate(1)
        counter = 0
        while not rospy.is_shutdown():
            r.sleep() #base_interval
            #if not self.flag_rssi_resampling:
            #    counter += 1
            #    if counter == 3:
            #        self.flag_rssi_resampling = True
            #        counter = 0

    def callback_rssi(self, rssi):
        if len(self.raw_rssi) >= self.rssi_len:
            self.raw_rssi.pop(0) #remove oldest rss
        self.raw_rssi.append(rss)


    def callback_posearray(self, poses):
        try_ = 0
        w_ = False
        time_stamp = poses.header.stamp
        while ((try_<3) and (not w_)):
            w_ = self.compute_rssi_particle_weight(poses, time_stamp)
            try_ += 1


    def compute_rssi_particle_weight(self, poses, time_stamp):
        if len(self.raw_rssi) < self.rssi_len: #ensure at least min_rss+len samples have been obtained
            time.sleep(.5)
            return False

        try:
            rospy.wait_for_service(self.ns+'rssi_localization',timeout=2)
        except:
            rospy.logwarn('RSSI localization server is not ready!')
            return False

        loc_server = rospy.ServiceProxy(self.ns+'rssi_localization', RSSILocalization)

        try:
            loc = loc_server(self.raw_rssi, len(poses), poses)
        except:
            e = sys.exc_info()[0]
            rospy.logerr('RSSI localization server: Localization failed: ' + str(e))
            return False

        weights = np.asarray(loc.weights)
        rospy.loginfo('RSSI max weights: {}, mean weight: {}, std weight: {}\t',np.max(weights), np.mean(weights), np.std(weights))

        best_pose = PoseStamped()
        best_pose.header.frame_id  = self.global_frame_id
        best_pose.header.stamp     = time_stamp
        best_pose.pose             = pose_from_array(get_best_pose(loc.pose_array, weights))
        self.pub_pose_best.publish(best_pose)

        prob_mesh = Float64MultiArray()
        prob_mesh.data = loc.prob_mesh
        self.pub_prob_mesh.publish(prob_mesh)

        if np.std(weights) > self.rssi_weightstd_krp_thres: # and self.flag_rssi_resampling:
            rospy.loginfo('RSSI Weight exceeds std threshold! Calling RSSI resampling')
            rs_pose_array, rs_weights = resampling_wheel_pose_array(loc.pose_array, weights, nsamples=weights.shape[0])

            rs_pose_array.header.frame_id  = self.global_frame_id
            rs_pose_array.header.stamp     = time_stamp
            self.pub_pose_array.publish(rs_pose_array)

            index = np.argmax(rs_weights)
            best_pose.pose                 = rs_pose_array[index]
            self.pub_pose_best.publish(best_pose)
            #self.flag_rssi_resampling = False



            rospy.loginfo('RSSI after resampling max weights: {}, mean weight: {}, std weight: {}\t',np.max(rs_weights), np.mean(rs_weights), np.std(rs_weights))

        #if np.mean(weights) > self.rssi_weightmean_krp_thres:
        # TODOs: define detect krp logic

        return True

    def callback_wifiinit(self, req):
        nsamples = req.nsamples
        loc = False
        t0 = time.time()
        count = 1
        while (not loc):
            rospy.loginfo('RSSI particle initialization attempt {}'.format(count))
            loc = self.wifinit(nsamples)
            count += 1
        rospy.loginfo('Initilization finished!')
        rospy.loginfo('elapsed time {:} ms'.format(int((time.time()-t0)*1000)))

        pose_array = PoseArray()
        pose_array.header.seq = self.seq
        self.seq += 1
        pose_array.header.frame_id  = self.global_frame_id
        pose_array.header.stamp     = rospy.get_rostime()
        pose_array.poses    = [pose_from_array_orientation(x) for x in self.particles]
        self.pub_pose_array.publish(pose_array)

        prob_mesh = Float64MultiArray()
        prob_mesh.data = loc.prob_mesh
        self.pub_prob_mesh.publish(prob_mesh)

    def wifiinit(self, nsamples):
        #sample wifi model for particles
        if len(self.raw_rssi) < self.rssi_len: #ensure at least min_rss+len samples have been obtained
            time.sleep(.5)
            return

        try:
            rospy.wait_for_service(self.ns+'rssi_localization',timeout=2)
        except:
            rospy.logwarn('RSSI localization server is not ready!')
            return

        loc_server = rospy.ServiceProxy(self.ns+'rssi_localization', RSSILocalization)

        try:
            loc = loc_server(self.raw_rssi, nsamples, None)
        except:
            e = sys.exc_info()[0]
            rospy.logerr('RSSI localization server: Localization failed: ' + str(e))
            return

        poses = np.asarray([[p.position.x, p.position.y,tf.transformations.euler_from_quaternion((0.,0.,p.orientation.z,p.orientation.w))[2]] for p in loc.pose_array.poses])

        #all sampled particles have orientation zero
        #randomize theta
        poses[:,2] = 2*np.pi*np.random.rand(nsamples)-np.pi
        weights = np.ones(nsamples)
        return [poses, weights.tolist(), loc.prob_mesh]

if __name__ == '__main__':
    node = KRPWifi()
